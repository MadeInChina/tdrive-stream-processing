#version 430
layout (local_size_x = 512) in;

struct DrawArraysIndirectCommand {
  uint  count;
  uint  primCount;
  uint  first;
  uint  baseInstance;
};

struct TaxiTmp {
    int start;
    int trail;
};

struct TaxiDetails {
    int offset;
    int size;
};

// IN
layout(std430, binding = 1) buffer TaxiPosition { vec2 position[];        };
layout(std430, binding = 2) buffer TaxiTimes    { int times[];            };
layout(std430, binding = 3) buffer TaxiOffsets  { TaxiDetails metadata[]; };

// OUT
layout(std430, binding = 4) buffer DrawCommandOut { DrawArraysIndirectCommand indirectDrawCommand[]; };

// Just Temp Memory (do not touch on host)
layout(std430, binding = 5) buffer TaxiDetailsIn { TaxiTmp tmp[]; };


uniform int currentTime;
uniform int vanishTime;

uniform int taxis;

void main() {
    uint taxiID = gl_GlobalInvocationID.x;
    if (taxiID >= taxis) return;

    int offset = metadata[taxiID].offset;
    int end    = offset + metadata[taxiID].size;

    int currentPos = offset + tmp[taxiID].start;
    int trailPos   = offset + tmp[taxiID].trail;

    for (; currentPos < end && times[currentPos] < currentTime; currentPos++);
    for (; trailPos   < end && times[trailPos  ] < vanishTime ; trailPos++  );

    currentPos = currentPos - offset;
    trailPos   = trailPos   - offset;

    tmp[taxiID].start = currentPos;
    tmp[taxiID].trail = trailPos;

    indirectDrawCommand[taxiID].first = taxiID * 6;
    indirectDrawCommand[taxiID].count = taxiID * 6 + 6;
    indirectDrawCommand[taxiID].primCount     = currentPos; //currentPos - trailPos;
    indirectDrawCommand[taxiID].baseInstance  = 0; //trailPos;
}
